styles = ("国风古风、复古、喜庆、蒸汽波、2D卡通、街头hip-hop、立体风、像素风、涂鸦、日漫、美漫、手绘、"
          "黏土风、实物、简约、唯美、科技风、搞怪")

colors = "红色、渐变色、彩色、黄色、绿色、蓝色、紫色、粉色、金色、黑色、白色"
elements = ("爱心、粒子、烟花、自然风光、彩虹、星星、闪电、火、爆炸、泡泡(或气泡)、发光的、放射线、魔法的、光晕、漏光、霓虹灯光、电影、胶片、噪点、"
            "鱼眼、纹理、波浪、纸张、边框、拍立得、拼图、片头片尾、舞台、灯、频谱、发光扫描、哈哈镜、镜子、立方体、方块、纸牌、进度条、剪辑框、"
            "音效、水、烟雾、太阳、月亮、天空、瀑布、海、雨、秋千、风筝、植物、花、樱花、玫瑰、树叶、树、花瓣、食物、水果、蛋、甜食、杯子、动物、"
            "交通工具、字母、KTV字幕、价格、数字、标签、歌词、语录、表情包、点赞、礼物")

elements_0401 = f'''
                    箭头: 用于指示方向、流程或步骤的图形元素，通常表现为直线加三角形头部。
                    线条: 表现为连接点与点之间的直线或曲线，常用于分隔内容或引导视线。
                    水果: 各类水果的图像，例如苹果（圆形带蒂）、香蕉（弯曲黄色）、橙子（圆形多汁）等。
                    植物: 各类植物的图像，包括树木（高大有枝干）、花草（低矮多彩）等。
                    自然: 描绘自然景观的元素，如山川（连绵起伏）、天空（广阔无云）等。
                    表情包: 以幽默或夸张方式表达情感的图像或符号，常见于社交媒体。
                    memes: 带有文字注释的流行图片，通常带有讽刺或幽默意味。
                    情绪: 表达特定心理状态的视觉元素，如快乐（笑脸）、悲伤（泪脸）等。
                    宠物: 各类宠物的图像，如猫、狗等。
                    特效: 增强视觉效果的技术处理，如光影（明暗对比强烈）、模糊（边缘柔和）等。
                    霓虹: 模仿霓虹灯效果的发光线条或图案，色彩鲜艳且边缘光晕明显。
                    花: 各类花卉的图像，如玫瑰、百合等。
                    旅行: 与旅行相关的图像，如地图（标注路径）、行李箱等。
                    度假: 与休闲度假相关的图像，如沙滩、太阳伞）等。
                    语录: 引用名人名言或经典句子的文字内容，通常伴随装饰性背景。
                    字母: 单个字母或字母组合的图形化表现形式，可能带有艺术设计感。
                    数字: 单个数字或数字组合的图形化表现形式，可能用于计数或装饰。
                    单词: 单个单词或短语的图形化表现形式，通常字体经过设计。
                    蒸汽波: 复古未来主义风格，融合80年代美学与数字失真效果，颜色梦幻。
                    食物: 各类食物的图像，如披萨（多配料、圆形）、汉堡（多层夹心）等。
                    边框: 用于装饰或分隔内容的框架图形，形状多样，如矩形、圆形等。
                    克莱茵蓝: 使用克莱因蓝这一深蓝色调的图形或图像，视觉冲击力强。
                    运动: 与体育运动相关的图像，如球类（圆形弹性物体）、器材（健身设备）等。
                    儿童: 与儿童生活相关的图像，如玩具（卡通造型）、卡通人物（圆润可爱）等。
                    图标: 代表特定功能或信息的小型图形符号，简洁直观，如放大镜表示搜索。
                    婚礼: 与婚礼仪式相关的图像，如戒指（圆形金属环）、婚纱（白色长裙）等。
                    爱心: 表示爱意或喜欢的图形，通常表现为对称的心形图案。
                    生日: 与生日庆祝相关的图像，如蛋糕（多层甜点）、蜡烛（点燃顶部）等。
                    春季: 与春季特征相关的图像，如花朵（盛开）、绿叶（新生嫩芽）等。
                    夏季: 与夏季特征相关的图像，如太阳（炽热明亮）、沙滩（阳光下金黄颗粒）等。
                    秋季: 与秋季特征相关的图像，如落叶（枯黄飘落）、果实（成熟饱满）等。
                    冬季: 与冬季特征相关的图像，如雪花（六边形对称）、雪人（堆叠雪球）等。
                    粒子: 表现微小颗粒的图形，如光点（闪烁）、灰尘（漂浮微粒）等。
                    动物: 各类动物的图像，如狮子（鬃毛浓密）、大象（体型庞大、长鼻）等。
                    光线: 表现光线传播的图形，如阳光（放射状）、灯光（聚焦光束）等。
                    物品: 各类日常用品的图像，如杯子（盛水容器）、书本（装订纸张）等。
                    电器: 各类家用电器的图像，如电视（屏幕显示）、冰箱（冷藏存储）等。
                    交通工具: 各类交通工具的图像，如汽车（四轮行驶）、飞机（飞行器）等。
                    装饰: 用于美化环境的图像，如彩带（飘扬）、气球（充气膨胀）等。
                    人: 各类人物的图像，如肖像（面部特写）、卡通人物（夸张造型）等。
                    纹理: 表现物体表面质感的图像，如木纹（年轮纹理）、石纹（粗糙颗粒）等。
                    灯: 各类灯具的图像，如台灯（桌面照明）、吊灯（悬挂装饰）等。
                '''

festival_explanations = f'''
    "圣诞节": "圣诞树、圣诞老人、雪花、彩灯、礼物、驯鹿";
    "新年": "烟花、鞭炮、对联、红包、灯笼、钟声";
    "万圣节": "南瓜、巫婆、幽灵、蝙蝠、鬼魂、月亮";
    "春节": "灯笼、鞭炮、对联、福字、红包、年画";
    "元宵节": "花灯、汤圆、灯笼、猜灯谜、舞狮";
    "斋月": "月亮、星河、清真寺、祈祷、斋戒";
    "父亲节": "父亲、胡子、啤酒、礼物、拥抱";
    "母亲节": "母亲、花、拥抱、礼物、蛋糕";
    "儿童节": "儿童、气球、糖果、玩具、笑脸";
    "复活节": "兔子、彩蛋、花朵、巧克力、教堂";
    "愚人节": "帽子、眼镜、气球、玩笑、恶作剧";
    "感恩节": "火鸡、南瓜派、感恩、家人、餐桌";
    "情人节": "心形、玫瑰、巧克力、拥抱、礼物";
    "妇女节": "女性、花、礼物、拥抱、裙子";
    "狂欢节": "彩色、音乐、舞蹈、面具、烟花";
    "端午节": "粽子、龙舟、艾草、菖蒲、香囊";
    "毕业季": "毕业帽、学位服、同学、校园、欢笑";
    "开学季": "书包、文具、书本、校园、新学期";
    "教师节": "教师、粉笔、书本、黑板、学生";
    "中秋节": "月亮、月饼、灯笼、团圆、赏月";
    "劳动节": "工人、工厂、工具、庆祝、劳动";
'''


styles_ext = '''
    国风古风：具有浓厚中国传统文化特色的风格，常见元素包括山水画、书法、传统服饰等；
    复古：模仿过去年代的设计风格，通常带有怀旧色彩，如老式电视机、磁带、复古滤镜、游戏手柄等；
    喜庆：充满欢乐和庆祝氛围的风格，常用红色、金色等颜色以及灯笼、鞭炮等元素；
    蒸汽波：融合80年代美学与未来主义的混合风格，常见元素包括霓虹灯、网格背景、故障艺术、大卫等；
    2D卡通：平面化的卡通风格，通常使用简单的线条和鲜艳的颜色，适合儿童或轻松主题；
    街头hip-hop：受街头文化和嘻哈音乐启发的风格，常见涂鸦、滑板、嘻哈服饰等元素；
    立体风：强调三维效果的风格，通常使用阴影、透视等技术营造立体感；
    像素风：使用像素化的方式形成的样式，整体观感是方块化的，具有明显的线条感；
    涂鸦：以喷漆或手绘形式呈现的艺术风格，常用于表达个性或社会议题；
    日漫：日本动漫风格，通常具有大眼睛、鲜艳色彩和夸张的表情；
    美漫：美国漫画风格，通常具有强烈的线条和阴影，角色设计偏向写实；
    手绘：人工使用画笔、颜料笔等绘画出来的风格，通常具有独特的个人特色；
    黏土风：模仿黏土材质的风格，通常具有柔和的形状和质感；
    实物：贴近真实生活的样式，如火、人手等，通常用于增强真实感；
    简约：极简主义风格，通常使用简单的形状和少量的颜色；
    唯美：追求美感和艺术性的风格，常见柔和的色调和优雅的构图；
    科技风：以科技为主题的设计风格，常见元素包括电路板、数据流、未来城市等；
    搞怪：充满幽默和荒诞感的风格，常用于娱乐或搞笑主题；
'''

def get_common_prompt(input_format):
    prompt = f'''
        ## 任务
            你的任务是分析理解{input_format}的内容，然后对{input_format}进行一级分类和二级分类；
            
        ## 要求
            - 首先对内容进行一个大的分类，挑选出最符合的分类，主要包括两个大类别：
                - 颜色：主要内容是一些文字或者文本，主要内容是文字，请将这个{input_format}分成颜色类别；
                - 风格：主要内容展现的是一种感觉，主要有下面这些风格：{styles} 
            - 第二步，如果是第一步的结果是颜色分类，输出{input_format}主体中的主要颜色，输入结果从下面类别中选择：{colors}， 可以多选;
                如果第一步中的结果是风格分类，分析{input_format}中是否包含下面的元素{elements}，如果包含，输出最符合的元素，可以多选；如果不包含元素，输出无元素即可；

        ## 输出格式
            请按照json的格式进行输出，包含下面的字段：
            - 一级分类：颜色或者某种风格；
            - 二级分类：主要的颜色或者包含的几种元素或者无元素；
        ## 输出示例
            一级分类：风格:国风；
            二级分类：不包含元素；
        
        现在，请按照上面的要求分析{input_format}，然后进行格式化的输出，不要输出其它无关内容。
        '''

    return prompt

def get_text_prompt(input_format):
    prompt = f'''
    ## 任务
        你的任务是分析理解{input_format}和文字相关的内容，然后按照下面的要求进行打标；
    
    ## 要求
        - 现在我会给你一些颜色标签,用<label>进行分割:
            <label>{colors}<label> ；
        - 首先观察到文字的颜色，对齐进行打标；
        - 如果背景中文字相关区域对文字的显示有一定的影响，也请输出文字相关区域背景的颜色标签，例如文字填充颜色，文字底图颜色，文字描边颜色等等；
        - 白色的背景不用输出背景的颜色标签；
        - 如果{input_format}中文字主体颜色超过3个，输出彩色标签
        - 输出1~3个标签，不要超过3个,并且输出每个标签的置信度,置信度在0~1之间，总置信度和为1；
        - 输出格式按照json格式进行输出,每个标签包含下面的字段：
            - 颜色: 颜色的标签；
            - 置信度：对应颜色标签的置信度；
    
    现在，请分析{input_format}，并且按照上面的要求进行打标，然后进行格式化输出，不要输出其它无关内容。
    '''

    return prompt

def get_magic_prompt(input_format):
    prompt = f"""
    ## 任务
        你的任务是分析理解{input_format}的内容，然后对{input_format}的风格和{input_format}包含的元素进行判断和输出；
        
    ## 要求
        - 第一步，我会给你一些元素标签,被<element>进行分割,如下：
          <element>{elements}<element>
          分析{input_format}主体是否包含上面的哪些元素，如果包含输出哪些元素；
        - 第二步,分析{input_format}的风格，风格标签从下面的标签中选择,风格标签用<label>进行分割,如下:
          <label>{styles}<label>
          输出{input_format}最符合的风格
        - 最后，综合第一步和第二步的结果，如果第一步不包含元素，那么输出风格 + 对应的风格；如果包含元素，那么输出元素、风格 + 对应的元素 + 对应的风格；
        - 按照json的格式进行输出，包含下面的字段:
            - 一级分类：风格或者元素、风格(如果第一步中有元素)；
            - 风格分类：具体的风格标签；
            - 元素分类：具体的包含的元素标签(没有元素的话，这个字段去掉)；
    ## 输出示例
        - 示例1：
            一级分类：风格；
            风格分类：国风；
            
        - 示例2：
            一级分类：元素、风格；
            风格分类: 可爱；
            元素分类：爱心、光晕；
            
    现在，请按照上面的要求分析{input_format}，然后进行格式化的输出，不要输出其它无关内容。
    """

    return prompt

 # - 标签内容尽量贴切{input_format}的整体观感；
def get_style_prompt(input_format):
    style = styles_ext.replace("\n", "").replace(" ", "")


    prompt = f'''
    ## 任务
        对{input_format}的风格进行判断和输出；

    ## 要求
        - 输出的风格标签下面的标签中选择,位于符号<element>中间的部分，并且每个风格给出了一些相应的解释，用于辅助你进行判断：
            <label>{style}<label> ；
        - {input_format}主体内容为黑白线条的{input_format}，请不要归为2D卡通风格,建议标签在简约、手绘、涂鸦中选择;
        - 蒸汽波的风格应该是一种既复古，前卫，又融合了未来主义的混合风格；
        - 像素风风格是具有明显的方块感，否则不要归为像素风；
        - 给出的标签不要太宽泛，给出1~2个标签，不要超过2个,并且输出每个标签的置信度,置信度在0~1之间，总置信度和为1；
        - 输出格式按照json格式进行输出，对于每一个标签，包含字段如下：
            - 标签：具体的风格标签；
            - 置信度:对应标签的相似程度；

    现在，请按照上面的要求分析{input_format}，然后进行格式化的输出，不要输出其它无关内容。
    '''

    return prompt

def get_festvial_prompt(input_format):
    festival = festival_explanations.replace('\n', '').replace(' ', '')

    prompt = f'''
    ## 任务
        你的任务是分析理解{input_format}的内容， 然后判断{input_format}是否是节日，如果是节日，给出节日的标签以及置信度；
        
    ## 要求
        - 输出的标签从下面的标签中选择, 位于符号<label>中间的部分，并且包含了每个标签可能存在的元素，用于辅助你进行判断：
          <label>{festival}<label> ;
        - 输出结果中最多包含一个标签，如果与节日不相关，那么输出标签：无节日；
        - 输出格式用json格式进行输出，包含字段如下：
          - 标签：对应的节日标签；
          - 置信度：对应标签的置信度；

    ## 输出示例
        - 示例1：
            标签：无节日；
            置信度：0.9；
        - 示例2：
            标签：春节；
            置信度：0.8；

    现在，请按照上面的要求分析{input_format},然后进行格式化的输出，不要输出其它无关内容。
    '''

    return prompt


def get_element_prompt(input_format):
    elements = elements_0401.replace('\n', '').replace(' ', '')
    
    prompt = f'''
    ## 任务
        你的任务是分析理解{input_format}的内容， 然后判断{input_format}是否包含给定的元素，如果包含，给出元素标签以及置信度；
        
    ## 要求
        - 输出的标签从下面的标签中选择, 位于符号<element>中间的部分，并且包含了每个标签可能存在的元素，用于辅助你进行判断：
          <element>{elements}<element> ;
        - 输出结果中最多包含4个标签及其置信度，总的置信度之和为1，如果没有上面的元素标签，那么输出标签：无元素；
        - 输出格式用json格式进行输出，对于每一个标签，包含字段如下：
          - 标签：对应的元素标签；
          - 置信度：对应标签的置信度；

    现在，请按照上面的要求分析{input_format},然后进行格式化的输出，不要输出其它无关内容。
    '''

    return prompt

